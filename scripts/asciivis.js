// Generated by CoffeeScript 1.7.1
(function() {
  require(['$api/models', '$api/audio'], function(models, audio) {
    'use strict';
    var doAsciiVis, height, render, width;
    width = 128;
    height = 14;
    render = function(wave) {
      var char, current, index, next, output, prev, screen, x, y, _i, _j, _k;
      screen = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; 0 <= width ? _i <= width : _i >= width; x = 0 <= width ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (y = _j = 0; 0 <= height ? _j <= height : _j >= height; y = 0 <= height ? ++_j : --_j) {
              _results1.push(' ');
            }
            return _results1;
          })());
        }
        return _results;
      })();
      for (index = _i = 0; 0 <= width ? _i <= width : _i >= width; index = 0 <= width ? ++_i : --_i) {
        prev = height / 2;
        if (index > 0) {
          prev = wave[index - 1];
        }
        current = wave[index];
        next = height / 2;
        if (index < wave.length - 1) {
          next = wave[index + 1];
        }
        if (prev === current && current === next) {
          char = '-';
        } else if (prev < current && next < current) {
          char = 'v';
        } else if (prev > current && next > current) {
          char = '^';
        } else if (prev < current && next === current) {
          char = '`';
        } else if (prev > current && next === current) {
          char = ',';
        } else if (prev === current && next > current) {
          char = '.';
        } else if (prev === current && next < current) {
          char = '\'';
        } else if (prev > current && next < current) {
          char = '/';
        } else if (prev < current && next > current) {
          char = '\\';
        } else {
          console.log(index + '/' + wave.length + ' ' + prev + ' ' + current + ' ' + next);
        }
        screen[index][current] = char;
      }
      output = '';
      for (y = _j = 0; 0 <= height ? _j <= height : _j >= height; y = 0 <= height ? ++_j : --_j) {
        for (x = _k = 0; 0 <= width ? _k <= width : _k >= width; x = 0 <= width ? ++_k : --_k) {
          output += screen[x][y];
        }
        output += '\n';
      }
      return document.getElementById('asciiVis').innerHTML = output;
    };
    doAsciiVis = function() {
      var analyzer, def, waveWidth, x;
      waveWidth = 1024;
      def = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; 0 <= width ? _i <= width : _i >= width; x = 0 <= width ? ++_i : --_i) {
          _results.push(height / 2);
        }
        return _results;
      })();
      render(def);
      analyzer = audio.RealtimeAnalyzer.forPlayer(models.player);
      return analyzer.addEventListener('audio', function(data) {
        var avg, index, n, position, segWidth, wave, _i, _j, _len, _ref;
        segWidth = waveWidth / width;
        wave = [];
        for (index = _i = 0; 0 <= width ? _i <= width : _i >= width; index = 0 <= width ? ++_i : --_i) {
          avg = 0;
          _ref = data.audio.wave.left.slice(segWidth * index, +(segWidth * index + segWidth) + 1 || 9e9);
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            n = _ref[_j];
            avg += n;
          }
          avg /= segWidth;
          position = Math.floor((height / 2) + ((height / 2) * avg));
          wave.push(position);
        }
        return render(wave);
      });
    };
    return exports.doAsciiVis = doAsciiVis;
  });

}).call(this);
